Aviral Sinha


CS 361


Assignment 1 Write Up


        When I first saw Test Driven Development I understood that it would improve the method that I use to design programs. Back in CS 161 we were taught to map out our functions on paper and then go ahead with a trial and error process. By building a test first then creating a function helps you specifically know what to focus on when creating a file. This assignment really pushed for test driven development because of how clear each of the requirements were. By creating a few distinct different objectives for each iteration of the file then each time around a different aspect is improved and added to the final product. The order of the tests would have changed the final code because of what the priorities of the new order of tests would have on my decision making process, but the current process of steps were all dependant on each other so it would heavily affect the final product. For this problem Test Driven Development was a very useful because as I said before it helps build the blocks of the program and make sure each part works before moving onto another part. Strengths of Test Driven development include that it creates simple and modular code, helps us as developers find bugs and issues early on and since each test addresses a specific part of the program the issue can be solved relatively quickly. The code is also easier to understand as you write it because each test focuses on a different concept and helps with the documentation or summary of the work and speed up development in the long run. While test driven development has its fair share of positives some drawbacks include that it requires a lot of time and effort which makes the process feel much longer to begin with, the testing part requires writing programs that cover the important parts, it takes extra effort to maintain a high quality of testing through every iteration which can easily diminish after a long time of testing and developing. In this assignment it wouldn’t be a case but in actual development of a program some features may be dropped over time which were subject to testing and have wasted crucial time and money. Test Driven Development is successful in boosting confidence but can instil a false sense of security in the developer because while it may pass their own tests it may not pass an automated test which is why it's smart to use both real tests and automated tests to make sure that the program works through any possible scenario. Test driven development is successful with some projects but not with all causing problems in testing, some designs aren’t finished correctly because TDD goes through a cycle and if that cycle isn’t completed then you are ending or starting on a poor point for the initial test. Since the development will rely on testing, the first design submitted may be scrapped because it doesn’t pass an initial test. In the end Test Driven Development works for some cases but is hard to implement and go through with. The tediousness of the process may benefit the overall quality of the project but it can take valuable time from developers and waste millions of dollars in some cases.