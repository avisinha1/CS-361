-----Write up for the testkwic file----------

For this assignment I decided to start with improving the testability first then moving onto performance. For a good program it is important for it to be able to showcase that it can perform all the tasks at hand both efficiently and correctly. I began by reading up on various ways of testing and concluded on doing unit testing. Unit testing uses test automation to achieve the goal of making sure each critical function in the kwic program performs to its expected ability. I began by understanding the concepts of test fixture(prepping the directories or databases), test case(testing an individual unit thus making sure it works), test suite(collection of test that can be executed together), and test runner(provides the executions and outcomes and letting the user know the response).  I began by first splitting up the kwic function into various functions that would be defined and then called by their respective test cases. This allowed me to understand the code better as I was using the professor's given code from the previous assignment. I then made a testkwic which then inputted a test string and would then compare and assert the output to the actual result. These tests while small in size allow me to make sure that the kwic file will run properly when reading a large text file like Ulysses or Chesterton. It falls under improvement of software architecture because I changed the program to make it check the quality of the output and make sure it is at the highest level. I executed unit testing by using variations of the command "python -m unittest" with the each test function that would read through the text I had inputted. This then would let me know if the test would pass or fail. I found this way of testing to be very interesting because it helped break down the program to each important piece. I will attach a diagram in the corresponding pdf document which will help show my understanding and process of this part of the assignment. 