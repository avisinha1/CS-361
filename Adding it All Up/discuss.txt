In this class, I got my first taste of what a career in software engineering would entail. The first assignment aptly titled as “Test Driven Development” gave me a reality check that computer science assignments won’t always be as straightforward as the work we were given in classes before. While classes like Data Structures or Assembly Language gave us direct instructions on what to do, this assignment was purpose built to be vague and our results would be based on the understanding we got from the instructions. Resulting in a night full of research of first python and then of the process of writing a test and then writing a code to pass said test. After I had completed the assignment I was still left confused on whether my project was correct or not. But I had the understanding of Test Driven development and the importance it holds in software engineering. While the result of the assignment had not been great(far from it) I was able to get a better understanding of a process to create quality code that meets all the criteria and is able give me a better understanding of what each part needs to do. The article I chose titled “5 More Best Practices for Test Driven Development(TDD)” (https://dzone.com/articles/5-more-best-practices-for-test-driven-development ) The article starts off with how business of whatever size do everything they can to reduce costs and get into the market and that testing of the product needs to address two main objectives: speed and quality. The testing for software is getting outsources for reasons like leveraging expertise, cutting down the time to market, increasing productivity, cost effectiveness, and just overall improving the quality of the code. The main purpose of TDD is to build small test cycles that are more sharp. By going through the process of writing the test, producing the code to pass it, and then refactoring to make it sustainable. This process allows developers to know whether the written code works as expected. The main objective is to have short test cycles that reduce development costs, cut down the time to market, improve productivity, write clean code, reduce turnaround time, and heavily improve the process of having quality code. Using the red-green method for refactoring which is a way of writing tests and ensuring all the problems are exposed. To make the process as clean and streamlined as possible it is best to have two separate directories, one for implementation and then one for testing. The benefit of this is so the chances of packaging tests with production binaries is reduced. It is also best to keep the test classes similar to the implementation classes which create a pairing system and make it easy to track. This helps locate and identify tests in a vast array of files. Since TDD requires the process of constantly writing tests with short life cycles, the chance of an initial test passing with failures is low meaning that either the functionality already exists or there is a defect with the test. The tests are supposed to fail so with each refactor the production code gets better. If done correctly TDD can reduce the number of defects in a program and lower additional efforts in the development process because it fixes issues faster. Test Driven Development ultimately helps with overall code design because of its shorter test and development cycles that bring a quality product to market in time. This article obviously relates to our first topic and assignment of Test driven development and more specifically combines topics from Show and Warden’s “The Art of Agile Development” which covers most of the same topics as the article I had chosen. By going through the history and as well as showing an example it shows the whole TDD cycle and goes through each of the steps (Think, Red Bar, Green Bar, and Refactor). This process when followed correctly results in a very efficient cycle for the development of the code and something that can be used throughout not just software engineering but any type of product development. This class gave me a lot of insight into software engineering. Test Driven Development is something that has really stuck with me because of how well it can work when done properly. The assignment really gave me an idea of how to do it and then the article as well as the class reading helped get an even better understanding of it. The best example of this was a few weeks after learning about TDD in class, a startup I had joined was asking me which method we should use to go about in developing the app and I had suggested TDD as it seemed like the best way to approach a long cycle of development that made sure the app would be quality and that each part would work properly. The idea made enough sense that for the first version of the app we are going through the process of TDD to create an initial product that can be built upon and continue to go through the process of testing and improving. In the end, TDD was a very important that we had covered in class and the importance of it in my future career is only further proven by the readings, articles, and already real life applications i have encountered.